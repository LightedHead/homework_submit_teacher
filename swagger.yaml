swagger: "2.0"
info:
  description: "the homework-submit system for teacher.   For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger homework_submit_teacher"
  
host: 127.0.0.1:5000

tags:
- name: "user"
  description: "Who can check the students' submits"
  
- name: "submits"
  description: "the homework students submit"
  
schemes:
- "https"
- "http"

paths:
  
  /downland/{filename}:
    get:
      tags:
      - "submits"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "filename"
        in: "path"
        description: ""
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}/submits:
    get:
      tags:
      - "user"
      summary: "check the students' submits"
      description: ""
      operationId: "checkSubmits"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: ""
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password_hash:
        type: "string"
      about_me:
        type: "string"
      last_seen:
        type: "string"
        format: "date-time"
    xml:
      name: "User"
      
  Submit:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "string"
      student_name:
        type: "string"
      timestamp:
        type: "string"
        format: "date-time"
      filename:
        type: "string"
      subject:
        type: "string"
    xml:
      name: "Submit"
  
  
  
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"